{"version":3,"sources":["../../src/index.ts","../../src/utils.ts","../../src/types.ts","../../src/constants.ts"],"sourcesContent":["import {\n  TxnBuilderTypes,\n  BCS,\n  HexString,\n  SupraAccount,\n  AnyRawTransaction,\n} from \"supra-l1-sdk-core\";\nimport axios, { AxiosResponse } from \"axios\";\nimport {\n  normalizeAddress,\n  fromUint8ArrayToJSArray,\n  sleep,\n  parseFunctionTypeArgs,\n} from \"./utils\";\nimport {\n  TransactionStatus,\n  TransactionResponse,\n  TransactionDetail,\n  SendTxPayload,\n  AccountInfo,\n  AccountResources,\n  TransactionInsights,\n  TxTypeForTransactionInsights,\n  CoinInfo,\n  CoinChange,\n  FaucetRequestResponse,\n  EnableTransactionWaitAndSimulationArgs,\n  OptionalTransactionPayloadArgs,\n  OptionalTransactionArgs,\n  PaginationArgs,\n  AccountCoinTransactionsDetail,\n  RawTxnJSON,\n  AnyAuthenticatorJSON,\n  Ed25519AuthenticatorJSON,\n  TransactionPayloadJSON,\n} from \"./types\";\nimport {\n  DEFAULT_CHAIN_ID,\n  DEFAULT_ENABLE_SIMULATION,\n  DEFAULT_MAX_GAS_UNITS,\n  DEFAULT_GAS_PRICE,\n  DEFAULT_RECORDS_ITEMS_COUNT,\n  DEFAULT_TX_EXPIRATION_DURATION,\n  DEFAULT_WAIT_FOR_TX_COMPLETION,\n  DELAY_BETWEEN_POOLING_REQUEST,\n  MAX_RETRY_FOR_TRANSACTION_COMPLETION,\n  MILLISECONDS_PER_SECOND,\n  SUPRA_FRAMEWORK_ADDRESS,\n  DEFAULT_MAX_GAS_FOR_SUPRA_TRANSFER_WHEN_RECEIVER_EXISTS,\n  DEFAULT_MAX_GAS_FOR_SUPRA_TRANSFER_WHEN_RECEIVER_NOT_EXISTS,\n  RAW_TRANSACTION_SALT,\n  RAW_TRANSACTION_WITH_DATA_SALT,\n} from \"./constants\";\nimport sha3 from \"js-sha3\";\n\nexport * from \"./types\";\nexport * from \"./constants\";\nexport { TxnBuilderTypes, BCS, HexString, SupraAccount };\n\n/**\n * Provides methods for interacting with supra rpc node.\n */\nexport class SupraClient {\n  supraNodeURL: string;\n  chainId: TxnBuilderTypes.ChainId;\n\n  constructor(url: string, chainId: number = DEFAULT_CHAIN_ID) {\n    this.supraNodeURL = url;\n    this.chainId = new TxnBuilderTypes.ChainId(chainId);\n  }\n\n  /**\n   * Creates and initializes `SupraClient` instance\n   * The chain id will be fetched from the provided `url`\n   * @param url rpc url of supra rpc node\n   * @returns `SupraClient` initialized instance\n   * @example\n   * ```typescript\n   * let supraClient = await SupraClient.init(\n   *    \"http://localhost:27001/\"\n   * );\n   * ```\n   */\n  static async init(url: string): Promise<SupraClient> {\n    let supraClient = new SupraClient(url);\n    supraClient.chainId = await supraClient.getChainId();\n    return supraClient;\n  }\n\n  private async sendRequest(\n    isGetMethod: boolean,\n    subURL: string,\n    data?: any\n  ): Promise<AxiosResponse<any, any>> {\n    let resData;\n    if (isGetMethod == true) {\n      resData = await axios({\n        method: \"get\",\n        baseURL: this.supraNodeURL,\n        url: subURL,\n      });\n    } else {\n      if (data == undefined) {\n        throw new Error(\"For Post Request 'data' Should Not Be 'undefined'\");\n      }\n      resData = await axios({\n        method: \"post\",\n        baseURL: this.supraNodeURL,\n        url: subURL,\n        data: data,\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n    }\n    if (resData.status == 404) {\n      throw new Error(\"Invalid URL, Path Not Found\");\n    }\n    return resData;\n  }\n\n  /**\n   * Get Chain Id Of Supra Network\n   * @returns Chain Id of network\n   */\n  async getChainId(): Promise<TxnBuilderTypes.ChainId> {\n    return new TxnBuilderTypes.ChainId(\n      Number(\n        (await this.sendRequest(true, \"/rpc/v1/transactions/chain_id\")).data\n      )\n    );\n  }\n\n  /**\n   * Get current `mean_gas_price`\n   * @returns Current `mean_gas_price`\n   */\n  async getGasPrice(): Promise<bigint> {\n    return BigInt(\n      (await this.sendRequest(true, \"/rpc/v1/transactions/estimate_gas_price\"))\n        .data.mean_gas_price\n    );\n  }\n\n  /**\n   * Airdrop test Supra token on given account\n   * @param account Hex-encoded 32 byte Supra account address\n   * @returns `FaucetRequestResponse`\n   */\n  async fundAccountWithFaucet(\n    account: HexString\n  ): Promise<FaucetRequestResponse> {\n    let resData = await this.sendRequest(\n      true,\n      `/rpc/v1/wallet/faucet/${account.toString()}`\n    );\n\n    if (typeof resData.data === \"object\") {\n      if (resData.data.hasOwnProperty(\"Accepted\")) {\n        return {\n          status: await this.waitForTransactionCompletion(\n            resData.data.Accepted\n          ),\n          transactionHash: resData.data.Accepted,\n        };\n      } else {\n        throw new Error(\n          \"something went wrong, getting unexpected response from rpc_node\"\n        );\n      }\n    } else {\n      throw new Error(\"try faucet later\");\n    }\n  }\n\n  /**\n   * Check whether given account exists onchain or not\n   * @param account Hex-encoded 32 byte Supra account address\n   * @returns `true` if account exists otherwise `false`\n   */\n  async isAccountExists(account: HexString): Promise<boolean> {\n    let resData = await this.sendRequest(\n      true,\n      `/rpc/v1/accounts/${account.toString()}`\n    );\n\n    if (resData.data === null || resData.status === 202) {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * Get info of given supra account\n   * @param account Hex-encoded 32 byte Supra account address\n   * @returns `AccountInfo`\n   */\n  async getAccountInfo(account: HexString): Promise<AccountInfo> {\n    let resData = await this.sendRequest(\n      true,\n      `/rpc/v1/accounts/${account.toString()}`\n    );\n\n    if (resData.data == null) {\n      throw new Error(\"Account Not Exists, Or Invalid Account Is Passed\");\n    }\n    return {\n      sequence_number: BigInt(resData.data.sequence_number),\n      authentication_key: resData.data.authentication_key,\n    };\n  }\n\n  /**\n   * Get list of all resources held by given supra account\n   * @param account Hex-encoded 32 byte Supra account address\n   * @param paginationArgs Arguments for pagination response\n   * @returns `AccountResources`\n   */\n  async getAccountResources(\n    account: HexString,\n    paginationArgs?: PaginationArgs\n  ): Promise<AccountResources> {\n    let requestPath = `/rpc/v1/accounts/${account.toString()}/resources?count=${\n      paginationArgs?.count ?? DEFAULT_RECORDS_ITEMS_COUNT\n    }`;\n    if (paginationArgs?.start) {\n      requestPath += `&start=${paginationArgs.start}`;\n    }\n\n    return (await this.sendRequest(true, requestPath)).data\n      .Resources as AccountResources;\n  }\n\n  /**\n   * Get data of resource held by given supra account\n   * @param account Hex-encoded 32 byte Supra account address\n   * @param resourceType Type of a resource\n   * @returns Resource data\n   * @example\n   * ```typescript\n   * let supraCoinInfo = await supraClient.getResourceData(\n   *   new HexString(\"0x1\"),\n   *   \"0x1::coin::CoinInfo<0x1::supra_coin::SupraCoin>\"\n   * )\n   * ```\n   */\n  async getResourceData(\n    account: HexString,\n    resourceType: string\n  ): Promise<any> {\n    let resData = await this.sendRequest(\n      true,\n      `/rpc/v1/accounts/${account.toString()}/resources/${resourceType}`\n    );\n\n    if (resData.data.result[0] == null) {\n      throw new Error(\"Resource not found\");\n    }\n    return resData.data.result[0];\n  }\n\n  /**\n   * Get status of given supra transaction\n   * @param transactionHash Hex-encoded 32 byte transaction hash for getting transaction status\n   * @returns `TransactionStatus`\n   */\n  async getTransactionStatus(\n    transactionHash: string\n  ): Promise<TransactionStatus | null> {\n    let resData = await this.sendRequest(\n      true,\n      `/rpc/v1/transactions/${transactionHash}`\n    );\n    if (resData.data == null) {\n      return null;\n    }\n\n    return resData.data.status == \"Unexecuted\"\n      ? TransactionStatus.Pending\n      : resData.data.status == \"Fail\"\n      ? TransactionStatus.Failed\n      : resData.data.status;\n  }\n\n  private getCoinChangeAmount(\n    userAddress: string,\n    events: any[]\n  ): Array<CoinChange> {\n    let coinChange: Map<\n      string,\n      {\n        totalDeposit: bigint;\n        totalWithdraw: bigint;\n      }\n    > = new Map();\n    events.forEach((eventData) => {\n      if (\n        (eventData.type === \"0x1::coin::CoinDeposit\" ||\n          eventData.type === \"0x1::coin::CoinWithdraw\") &&\n        \"0x\" +\n          eventData.data.account\n            .substring(2, eventData.data.account)\n            .padStart(64, \"0\") ===\n          userAddress\n      ) {\n        if (eventData.type === \"0x1::coin::CoinDeposit\") {\n          let curData = coinChange.get(eventData.data.coin_type);\n          if (curData != undefined) {\n            coinChange.set(eventData.data.coin_type, {\n              totalDeposit:\n                curData.totalDeposit + BigInt(eventData.data.amount),\n              totalWithdraw: curData.totalWithdraw,\n            });\n          } else {\n            coinChange.set(eventData.data.coin_type, {\n              totalDeposit: BigInt(eventData.data.amount),\n              totalWithdraw: BigInt(0),\n            });\n          }\n        } else if (eventData.type === \"0x1::coin::CoinWithdraw\") {\n          let curData = coinChange.get(eventData.data.coin_type);\n          if (curData != undefined) {\n            coinChange.set(eventData.data.coin_type, {\n              totalDeposit: curData.totalDeposit,\n              totalWithdraw:\n                curData.totalWithdraw + BigInt(eventData.data.amount),\n            });\n          } else {\n            coinChange.set(eventData.data.coin_type, {\n              totalDeposit: BigInt(0),\n              totalWithdraw: BigInt(eventData.data.amount),\n            });\n          }\n        }\n      }\n    });\n    let coinChangeParsed: CoinChange[] = [];\n    coinChange.forEach(\n      (\n        value: {\n          totalDeposit: bigint;\n          totalWithdraw: bigint;\n        },\n        key: string\n      ) => {\n        coinChangeParsed.push({\n          coinType: key,\n          amount: value.totalDeposit - value.totalWithdraw,\n        });\n      }\n    );\n    return coinChangeParsed;\n  }\n\n  private getTransactionInsights(\n    userAddress: string,\n    txData: any\n  ): TransactionInsights {\n    let txInsights: TransactionInsights = {\n      coinReceiver: \"\",\n      coinChange: [\n        {\n          amount: BigInt(0),\n          coinType: \"\",\n        },\n      ],\n      type: TxTypeForTransactionInsights.EntryFunctionCall,\n    };\n\n    // NOTE: Need to optimize this conditionals\n    if (txData.payload.Move.type === \"entry_function_payload\") {\n      if (txData.payload.Move.function === \"0x1::supra_account::transfer\") {\n        let amountChange = BigInt(txData.payload.Move.arguments[1]);\n        if (userAddress === txData.header.sender.Move) {\n          amountChange *= BigInt(-1);\n        }\n        txInsights.coinReceiver = txData.payload.Move.arguments[0];\n        txInsights.coinChange[0] = {\n          amount: amountChange,\n          coinType: \"0x1::supra_coin::SupraCoin\",\n        };\n        txInsights.type = TxTypeForTransactionInsights.CoinTransfer;\n      } else if (\n        txData.payload.Move.function === \"0x1::supra_account::transfer_coins\" ||\n        txData.payload.Move.function === \"0x1::coin::transfer\"\n      ) {\n        let amountChange = BigInt(txData.payload.Move.arguments[1]);\n        if (userAddress === txData.header.sender.Move) {\n          amountChange *= BigInt(-1);\n        }\n        txInsights.coinReceiver = txData.payload.Move.arguments[0];\n        txInsights.coinChange[0] = {\n          amount: amountChange,\n          coinType: txData.payload.Move.type_arguments[0],\n        };\n        txInsights.type = TxTypeForTransactionInsights.CoinTransfer;\n      } else {\n        if (txData.status === TransactionStatus.Success) {\n          txInsights.coinChange = this.getCoinChangeAmount(\n            userAddress,\n            txData.output.Move.events\n          );\n        }\n      }\n    } else {\n      if (txData.payload.Move.type === \"script_payload\") {\n        txInsights.type = TxTypeForTransactionInsights.ScriptCall;\n      } else if (\n        txData.payload.Move.type === \"automation_registration_payload\"\n      ) {\n        txInsights.type = TxTypeForTransactionInsights.AutomationRegistration;\n      } else {\n        throw new Error(\n          \"something went wrong, found unsupported type of transaction\"\n        );\n      }\n\n      if (txData.status === TransactionStatus.Success) {\n        txInsights.coinChange = this.getCoinChangeAmount(\n          userAddress,\n          txData.output.Move.events\n        );\n      }\n    }\n    return txInsights;\n  }\n\n  /**\n   * Get transaction details of given transaction hash\n   * @param account Hex-encoded 32 byte Supra account address\n   * @param transactionHash Hex-encoded 32 byte transaction hash for getting transaction details\n   * @returns `TransactionDetail`\n   */\n  async getTransactionDetail(\n    account: HexString,\n    transactionHash: string\n  ): Promise<TransactionDetail | null> {\n    let resData = await this.sendRequest(\n      true,\n      `/rpc/v1/transactions/${transactionHash}`\n    );\n\n    if (resData.data == null) {\n      return null;\n    }\n\n    // Added Patch to resolve inconsistencies issue of `rpc_node`\n    if (\n      resData.data.status === TransactionStatus.Pending ||\n      resData.data.output === null ||\n      resData.data.header === null\n    ) {\n      return {\n        txHash: transactionHash,\n        sender: resData.data.header.sender.Move,\n        sequenceNumber: resData.data.header.sequence_number,\n        maxGasAmount: resData.data.header.max_gas_amount,\n        gasUnitPrice: resData.data.header.gas_unit_price,\n        gasUsed: undefined,\n        transactionCost: undefined,\n        txExpirationTimestamp: Number(\n          resData.data.header.expiration_timestamp.microseconds_since_unix_epoch\n        ),\n        txConfirmationTime: undefined,\n        status: resData.data.status,\n        events: undefined,\n        blockNumber: undefined,\n        blockHash: undefined,\n        transactionInsights: this.getTransactionInsights(\n          account.toString(),\n          resData.data\n        ),\n        vm_status: undefined,\n      };\n    }\n    return {\n      txHash: transactionHash,\n      sender: resData.data.header.sender.Move,\n      sequenceNumber: resData.data.header.sequence_number,\n      maxGasAmount: resData.data.header.max_gas_amount,\n      gasUnitPrice: resData.data.header.gas_unit_price,\n      gasUsed: resData.data.output?.Move.gas_used,\n      transactionCost:\n        resData.data.header.gas_unit_price * resData.data.output?.Move.gas_used,\n      txExpirationTimestamp: Number(\n        resData.data.header.expiration_timestamp.microseconds_since_unix_epoch\n      ),\n      txConfirmationTime: Number(\n        resData.data.block_header.timestamp.microseconds_since_unix_epoch\n      ),\n      status:\n        resData.data.status == \"Fail\" || resData.data.status == \"Invalid\"\n          ? \"Failed\"\n          : resData.data.status,\n      events: resData.data.output?.Move.events,\n      blockNumber: resData.data.block_header.height,\n      blockHash: resData.data.block_header.hash,\n      transactionInsights: this.getTransactionInsights(\n        account.toString(),\n        resData.data\n      ),\n      vm_status: resData.data.output.Move.vm_status,\n    };\n  }\n\n  /**\n   * Get transactions sent by the account\n   * @param account Supra account address\n   * @param paginationArgs Arguments for pagination response\n   * @returns List of `TransactionDetail`\n   */\n  async getAccountTransactionsDetail(\n    account: HexString,\n    paginationArgs?: PaginationArgs\n  ): Promise<TransactionDetail[]> {\n    let requestPath = `/rpc/v1/accounts/${account.toString()}/transactions?count=${\n      paginationArgs?.count ?? DEFAULT_RECORDS_ITEMS_COUNT\n    }`;\n    if (paginationArgs?.start) {\n      requestPath += `&start=${paginationArgs.start}`;\n    }\n\n    let resData = await this.sendRequest(true, requestPath);\n    if (resData.data.record == null) {\n      throw new Error(\"Account Not Exists, Or Invalid Account Is Passed\");\n    }\n\n    let accountTransactionsDetail: TransactionDetail[] = [];\n    resData.data.record.forEach((data: any) => {\n      accountTransactionsDetail.push({\n        txHash: data.hash,\n        sender: data.header.sender.Move,\n        sequenceNumber: data.header.sequence_number,\n        maxGasAmount: data.header.max_gas_amount,\n        gasUnitPrice: data.header.gas_unit_price,\n        gasUsed: data.output.Move.gas_used,\n        transactionCost: data.header.gas_unit_price * data.output.Move.gas_used,\n        txExpirationTimestamp: Number(\n          data.header.expiration_timestamp.microseconds_since_unix_epoch\n        ),\n        txConfirmationTime: Number(\n          data.block_header.timestamp.microseconds_since_unix_epoch\n        ),\n        status:\n          data.status === \"Fail\" || data.status === \"Invalid\"\n            ? \"Failed\"\n            : data.status,\n        events: data.output.Move.events,\n        blockNumber: data.block_header.height,\n        blockHash: data.block_header.hash,\n        transactionInsights: this.getTransactionInsights(\n          account.toString(),\n          data\n        ),\n        vm_status: data.output.Move.vm_status,\n      });\n    });\n    return accountTransactionsDetail;\n  }\n\n  /**\n   * Get Coin Transfer related transactions associated with the account\n   * @param account Supra account address\n   * @param account Supra account address\n   * @returns List of `TransactionDetail`\n   */\n  async getCoinTransactionsDetail(\n    account: HexString,\n    paginationArgs?: PaginationArgs\n  ): Promise<AccountCoinTransactionsDetail> {\n    let requestPath = `/rpc/v1/accounts/${account.toString()}/coin_transactions?count=${\n      paginationArgs?.count ?? DEFAULT_RECORDS_ITEMS_COUNT\n    }`;\n    if (paginationArgs?.start) {\n      requestPath += `&start=${paginationArgs?.start}`;\n    }\n\n    let resData = await this.sendRequest(true, requestPath);\n    if (resData.data.record == null) {\n      throw new Error(\"Account Not Exists, Or Invalid Account Is Passed\");\n    }\n\n    let coinTransactionsDetail: TransactionDetail[] = [];\n    resData.data.record.forEach((data: any) => {\n      coinTransactionsDetail.push({\n        txHash: data.hash,\n        sender: data.header.sender.Move,\n        sequenceNumber: data.header.sequence_number,\n        maxGasAmount: data.header.max_gas_amount,\n        gasUnitPrice: data.header.gas_unit_price,\n        gasUsed: data.output.Move.gas_used,\n        transactionCost: data.header.gas_unit_price * data.output.Move.gas_used,\n        txExpirationTimestamp: Number(\n          data.header.expiration_timestamp.microseconds_since_unix_epoch\n        ),\n        txConfirmationTime: Number(\n          data.block_header.timestamp.microseconds_since_unix_epoch\n        ),\n        status:\n          data.status === \"Fail\" || data.status === \"Invalid\"\n            ? \"Failed\"\n            : data.status,\n        events: data.output.Move.events,\n        blockNumber: data.block_header.height,\n        blockHash: data.block_header.hash,\n        transactionInsights: this.getTransactionInsights(\n          account.toString(),\n          data\n        ),\n        vm_status: data.output.Move.vm_status,\n      });\n    });\n    return {\n      transactions: coinTransactionsDetail,\n      cursor: resData.data.cursor,\n    };\n  }\n\n  /**\n   * Get transactions sent by the account and Coin transfer related transactions\n   * @param account Supra account address\n   * @param count Number of coin transfer transactions and account sent transaction to be considered,\n   * For instance if the value is `N` so total `N*2` transactions will be returned.\n   * @returns List of `TransactionDetail`\n   */\n  async getAccountCompleteTransactionsDetail(\n    account: HexString,\n    count: number = DEFAULT_RECORDS_ITEMS_COUNT\n  ): Promise<TransactionDetail[]> {\n    let coinTransactions = await this.sendRequest(\n      true,\n      `/rpc/v1/accounts/${account.toString()}/coin_transactions?count=${count}`\n    );\n    let accountSendedTransactions = await this.sendRequest(\n      true,\n      `/rpc/v1/accounts/${account.toString()}/transactions?count=${count}`\n    );\n\n    let combinedTxArray: any[] = [];\n    if (coinTransactions.data.record != null) {\n      combinedTxArray.push(...coinTransactions.data.record);\n    }\n    if (accountSendedTransactions.data.record != null) {\n      combinedTxArray.push(...accountSendedTransactions.data.record);\n    }\n\n    let combinedTx = combinedTxArray.filter(\n      (item, index, self) =>\n        index === self.findIndex((data) => data.hash === item.hash)\n    );\n    combinedTx.sort((a, b) => {\n      if (\n        a.block_header.timestamp.microseconds_since_unix_epoch <\n        b.block_header.timestamp.microseconds_since_unix_epoch\n      ) {\n        return 1;\n      } else {\n        return -1;\n      }\n    });\n\n    let coinTransactionsDetail: TransactionDetail[] = [];\n    combinedTx.forEach((data: any) => {\n      coinTransactionsDetail.push({\n        txHash: data.hash,\n        sender: data.header.sender.Move,\n        sequenceNumber: data.header.sequence_number,\n        maxGasAmount: data.header.max_gas_amount,\n        gasUnitPrice: data.header.gas_unit_price,\n        gasUsed: data.output.Move.gas_used,\n        transactionCost: data.header.gas_unit_price * data.output.Move.gas_used,\n        txExpirationTimestamp: Number(\n          data.header.expiration_timestamp.microseconds_since_unix_epoch\n        ),\n        txConfirmationTime: Number(\n          data.block_header.timestamp.microseconds_since_unix_epoch\n        ),\n        status:\n          data.status === \"Fail\" || data.status === \"Invalid\"\n            ? \"Failed\"\n            : data.status,\n        events: data.output.Move.events,\n        blockNumber: data.block_header.height,\n        blockHash: data.block_header.hash,\n        transactionInsights: this.getTransactionInsights(\n          account.toString(),\n          data\n        ),\n        vm_status: data.output.Move.vm_status,\n      });\n    });\n    return coinTransactionsDetail;\n  }\n\n  /**\n   * Get Supra balance of given account\n   * @param coinType Type of a coin resource\n   * @returns CoinInfo\n   */\n  async getCoinInfo(coinType: string): Promise<CoinInfo> {\n    let coinInfoResource = await this.getResourceData(\n      new HexString(coinType.split(\"::\")[0]),\n      `${SUPRA_FRAMEWORK_ADDRESS}::coin::CoinInfo<${coinType}>`\n    );\n    return {\n      name: coinInfoResource.name,\n      symbol: coinInfoResource.symbol,\n      decimals: coinInfoResource.decimals,\n    };\n  }\n\n  /**\n   * Get Supra balance of given account\n   * @param account Supra Account address for getting balance\n   * @returns Supra Balance\n   */\n  async getAccountSupraCoinBalance(account: HexString): Promise<bigint> {\n    return BigInt(\n      (\n        await this.getResourceData(\n          account,\n          \"0x1::coin::CoinStore<0x1::supra_coin::SupraCoin>\"\n        )\n      ).coin.value\n    );\n  }\n\n  /**\n   * Get Coin balance of given account\n   * @param account Supra account address for getting balance\n   * @param coinType Type of a coin resource\n   * @returns Supra Balance\n   */\n  async getAccountCoinBalance(\n    account: HexString,\n    coinType: string\n  ): Promise<bigint> {\n    return BigInt(\n      (await this.getResourceData(account, `0x1::coin::CoinStore<${coinType}>`))\n        .coin.value\n    );\n  }\n\n  /**\n   * Invoke view method of the smart contract\n   * @param functionFullName function full name refers to the module name + function name,\n   * For instance `0x1::pbo_delegation_pool::get_stake`\n   * @param typeArguments View function type arguments\n   * @param functionArguments View function arguments\n   * @returns Table item's data\n   */\n  async invokeViewMethod(\n    functionFullName: string,\n    typeArguments: Array<string>,\n    functionArguments: Array<string>\n  ): Promise<any> {\n    return (\n      await this.sendRequest(false, \"/rpc/v1/view\", {\n        function: functionFullName,\n        type_arguments: typeArguments,\n        arguments: functionArguments,\n      })\n    ).data.result;\n  }\n\n  /**\n   * Access item of table using associated key\n   * @param tableHandle Table handle to access table item\n   * @param keyType Type of the key\n   * @param valueType Type of the value\n   * @param key The actual key\n   * @returns Table item's data\n   */\n  async getTableItemByKey(\n    tableHandle: string,\n    keyType: string,\n    valueType: string,\n    key: string\n  ): Promise<any> {\n    return (\n      await this.sendRequest(false, `/rpc/v1/tables/${tableHandle}/item`, {\n        key_type: keyType,\n        value_type: valueType,\n        key: key,\n      })\n    ).data;\n  }\n\n  private async waitForTransactionCompletion(\n    txHash: string\n  ): Promise<TransactionStatus> {\n    for (let i = 0; i < MAX_RETRY_FOR_TRANSACTION_COMPLETION; i++) {\n      let txStatus = await this.getTransactionStatus(txHash);\n      if (txStatus === null || txStatus == TransactionStatus.Pending) {\n        await sleep(DELAY_BETWEEN_POOLING_REQUEST);\n      } else {\n        return txStatus;\n      }\n    }\n    return TransactionStatus.Pending;\n  }\n\n  private async sendTx(\n    sendTxJsonPayload: SendTxPayload,\n    enableTransactionWaitAndSimulationArgs?: EnableTransactionWaitAndSimulationArgs\n  ): Promise<TransactionResponse> {\n    if (\n      (enableTransactionWaitAndSimulationArgs?.enableTransactionSimulation ??\n        DEFAULT_ENABLE_SIMULATION) === true\n    ) {\n      await this.simulateTx(sendTxJsonPayload);\n    }\n\n    let resData = await this.sendRequest(\n      false,\n      \"/rpc/v1/transactions/submit\",\n      sendTxJsonPayload\n    );\n    console.log(\"Transaction Request Sent, Waiting For Completion\");\n\n    return {\n      txHash: resData.data,\n      result:\n        (enableTransactionWaitAndSimulationArgs?.enableWaitForTransaction ??\n          DEFAULT_WAIT_FOR_TX_COMPLETION) === true\n          ? await this.waitForTransactionCompletion(resData.data)\n          : TransactionStatus.Pending,\n    };\n  }\n\n  /**\n   * Generates signature message for supra transaction using `AnyRawTransaction`\n   * @param rawTxn a RawTransaction, MultiAgentRawTransaction or FeePayerRawTransaction\n   * @returns Signature message\n   */\n  static getSupraTransactionSignatureMessage(\n    rawTxn: AnyRawTransaction\n  ): Uint8Array {\n    let preHash = Uint8Array.from(\n      Buffer.from(\n        sha3.sha3_256(\n          rawTxn instanceof TxnBuilderTypes.RawTransaction\n            ? RAW_TRANSACTION_SALT\n            : RAW_TRANSACTION_WITH_DATA_SALT\n        ),\n        \"hex\"\n      )\n    );\n\n    let rawTxSerializedData = new Uint8Array(BCS.bcsToBytes(rawTxn));\n    let signatureMessage = new Uint8Array(\n      preHash.length + rawTxSerializedData.length\n    );\n    signatureMessage.set(preHash);\n    signatureMessage.set(rawTxSerializedData, preHash.length);\n    return signatureMessage;\n  }\n\n  /**\n   * Generates `ed25519_signature` for supra transaction using `AnyRawTransaction`\n   * @param senderAccount the account to sign on the transaction\n   * @param rawTxn a RawTransaction, MultiAgentRawTransaction or FeePayerRawTransaction\n   * @returns ed25519 signature in `HexString`\n   */\n  static signSupraTransaction(\n    senderAccount: SupraAccount,\n    rawTxn: AnyRawTransaction\n  ): HexString {\n    return senderAccount.signBuffer(\n      SupraClient.getSupraTransactionSignatureMessage(rawTxn)\n    );\n  }\n\n  /**\n   * Signs a multi transaction type (multi agent / fee payer) and returns the\n   * signer authenticator to be used to submit the transaction.\n   * @param signer the account to sign on the transaction\n   * @param rawTxn a MultiAgentRawTransaction or FeePayerRawTransaction\n   * @returns signer authenticator\n   */\n  static signSupraMultiTransaction(\n    signer: SupraAccount,\n    rawTxn:\n      | TxnBuilderTypes.MultiAgentRawTransaction\n      | TxnBuilderTypes.FeePayerRawTransaction\n  ): TxnBuilderTypes.AccountAuthenticatorEd25519 {\n    const signerSignature = new TxnBuilderTypes.Ed25519Signature(\n      SupraClient.signSupraTransaction(signer, rawTxn).toUint8Array()\n    );\n    const signerAuthenticator = new TxnBuilderTypes.AccountAuthenticatorEd25519(\n      new TxnBuilderTypes.Ed25519PublicKey(signer.signingKey.publicKey),\n      signerSignature\n    );\n\n    return signerAuthenticator;\n  }\n\n  private getTransactionPayloadJSON(\n    txPayload: TxnBuilderTypes.TransactionPayload\n  ): TransactionPayloadJSON {\n    if (txPayload instanceof TxnBuilderTypes.TransactionPayloadEntryFunction) {\n      return {\n        EntryFunction: {\n          module: {\n            address: txPayload.value.module_name.address\n              .toHexString()\n              .toString(),\n            name: txPayload.value.module_name.name.value,\n          },\n          function: txPayload.value.function_name.value,\n          ty_args: parseFunctionTypeArgs(txPayload.value.ty_args),\n          args: fromUint8ArrayToJSArray(txPayload.value.args),\n        },\n      };\n    } else if (\n      txPayload instanceof\n      TxnBuilderTypes.TransactionPayloadAutomationRegistration\n    ) {\n      if (\n        txPayload.value instanceof\n        TxnBuilderTypes.AutomationRegistrationParamsV1\n      ) {\n        return {\n          AutomationRegistration: {\n            V1: {\n              automated_function: {\n                module: {\n                  address:\n                    txPayload.value.value.automated_function.module_name.address\n                      .toHexString()\n                      .toString(),\n                  name: txPayload.value.value.automated_function.module_name\n                    .name.value,\n                },\n                function:\n                  txPayload.value.value.automated_function.function_name.value,\n                ty_args: parseFunctionTypeArgs(\n                  txPayload.value.value.automated_function.ty_args\n                ),\n                args: fromUint8ArrayToJSArray(\n                  txPayload.value.value.automated_function.args\n                ),\n              },\n              max_gas_amount: Number(txPayload.value.value.max_gas_amount),\n              gas_price_cap: Number(txPayload.value.value.gas_price_cap),\n              automation_fee_cap_for_epoch: Number(\n                txPayload.value.value.automation_fee_cap_for_epoch\n              ),\n              expiration_timestamp_secs: Number(\n                txPayload.value.value.expiration_timestamp_secs\n              ),\n              aux_data: fromUint8ArrayToJSArray(txPayload.value.value.aux_data),\n            },\n          },\n        };\n      } else {\n        throw new Error(\"Unknown variant of `AutomationRegistrationParams`\");\n      }\n    } else {\n      throw new Error(\"Unknown variant of `TransactionPayload`\");\n    }\n  }\n\n  private getRawTxnJSON(rawTxn: TxnBuilderTypes.RawTransaction): RawTxnJSON {\n    return {\n      sender: rawTxn.sender.toHexString().toString(),\n      sequence_number: Number(rawTxn.sequence_number),\n      payload: this.getTransactionPayloadJSON(rawTxn.payload),\n      max_gas_amount: Number(rawTxn.max_gas_amount),\n      gas_unit_price: Number(rawTxn.gas_unit_price),\n      expiration_timestamp_secs: Number(rawTxn.expiration_timestamp_secs),\n      chain_id: rawTxn.chain_id.value,\n    };\n  }\n\n  /**\n   * Generate `SendTxPayload` using `RawTransaction` to send transaction request\n   * Generated data can be used to send transaction directly using `/rpc/v1/transactions/submit` endpoint of `rpc_node`\n   * @param senderAccount Sender KeyPair\n   * @param rawTxn Raw transaction data\n   * @returns `SendTxPayload`\n   */\n  getSendTxPayload(\n    senderAccount: SupraAccount,\n    rawTxn: TxnBuilderTypes.RawTransaction\n  ): SendTxPayload {\n    return {\n      Move: {\n        raw_txn: this.getRawTxnJSON(rawTxn),\n        authenticator: {\n          Ed25519: {\n            public_key: senderAccount.pubKey().toString(),\n            signature: SupraClient.signSupraTransaction(\n              senderAccount,\n              rawTxn\n            ).toString(),\n          },\n        },\n      },\n    };\n  }\n\n  /**\n   * Send `entry_function_payload` type tx using serialized raw transaction data\n   * @param senderAccount Sender KeyPair\n   * @param serializedRawTransaction Serialized raw transaction data\n   * @param enableTransactionWaitAndSimulationArgs enable transaction wait and simulation arguments\n   * @returns `TransactionResponse`\n   */\n  async sendTxUsingSerializedRawTransaction(\n    senderAccount: SupraAccount,\n    serializedRawTransaction: Uint8Array,\n    enableTransactionWaitAndSimulationArgs?: EnableTransactionWaitAndSimulationArgs\n  ): Promise<TransactionResponse> {\n    let sendTxPayload = this.getSendTxPayload(\n      senderAccount,\n      TxnBuilderTypes.RawTransaction.deserialize(\n        new BCS.Deserializer(serializedRawTransaction)\n      )\n    );\n\n    return await this.sendTx(\n      sendTxPayload,\n      enableTransactionWaitAndSimulationArgs\n    );\n  }\n\n  /**\n   * Send `entry_function_payload` type tx using serialized raw transaction data and ed25519 signature\n   * @param senderPubkey Sender ed25519 pubkey\n   * @param signature Ed25519 signature\n   * @param serializedRawTransaction Serialized raw transaction data\n   * @param enableTransactionWaitAndSimulationArgs enable transaction wait and simulation arguments\n   * @returns `TransactionResponse`\n   */\n  async sendTxUsingSerializedRawTransactionAndSignature(\n    senderPubkey: HexString,\n    signature: HexString,\n    serializedRawTransaction: Uint8Array,\n    enableTransactionWaitAndSimulationArgs?: EnableTransactionWaitAndSimulationArgs\n  ): Promise<TransactionResponse> {\n    let sendTxPayload = {\n      Move: {\n        raw_txn: this.getRawTxnJSON(\n          TxnBuilderTypes.RawTransaction.deserialize(\n            new BCS.Deserializer(serializedRawTransaction)\n          )\n        ),\n        authenticator: {\n          Ed25519: {\n            public_key: senderPubkey.toString(),\n            signature: signature.toString(),\n          },\n        },\n      },\n    };\n\n    return await this.sendTx(\n      sendTxPayload,\n      enableTransactionWaitAndSimulationArgs\n    );\n  }\n\n  /**\n   * Sends sponsor transaction\n   * @param feePayerAddress Account address of tx fee payer\n   * @param secondarySignersAccountAddress List of account address of tx secondary signers\n   * @param rawTxn The raw transaction to be submitted\n   * @param senderAuthenticator The sender account authenticator\n   * @param feePayerAuthenticator The feepayer account authenticator\n   * @param secondarySignersAuthenticator An optional array of the secondary signers account authenticator\n   * @param enableTransactionWaitAndSimulationArgs enable transaction wait and simulation arguments\n   * @returns `TransactionResponse`\n   */\n  async sendSponsorTransaction(\n    feePayerAddress: string,\n    secondarySignersAccountAddress: Array<string>,\n    rawTxn: TxnBuilderTypes.RawTransaction,\n    senderAuthenticator: TxnBuilderTypes.AccountAuthenticatorEd25519,\n    feePayerAuthenticator: TxnBuilderTypes.AccountAuthenticatorEd25519,\n    secondarySignersAuthenticator: Array<TxnBuilderTypes.AccountAuthenticatorEd25519> = [],\n    enableTransactionWaitAndSimulationArgs?: EnableTransactionWaitAndSimulationArgs\n  ): Promise<TransactionResponse> {\n    let secondarySignersAuthenticatorJSON: Array<Ed25519AuthenticatorJSON> = [];\n    secondarySignersAuthenticator.forEach((authenticator) => {\n      secondarySignersAuthenticatorJSON.push(\n        this.getED25519AuthenticatorJSON(authenticator)\n      );\n    });\n\n    let sendTxPayload: SendTxPayload = {\n      Move: {\n        raw_txn: this.getRawTxnJSON(rawTxn),\n        authenticator: {\n          FeePayer: {\n            sender: this.getED25519AuthenticatorJSON(senderAuthenticator),\n            secondary_signer_addresses: secondarySignersAccountAddress,\n            secondary_signers: secondarySignersAuthenticatorJSON,\n            fee_payer_address: feePayerAddress,\n            fee_payer_signer: this.getED25519AuthenticatorJSON(\n              feePayerAuthenticator\n            ),\n          },\n        },\n      },\n    };\n\n    return await this.sendTx(\n      sendTxPayload,\n      enableTransactionWaitAndSimulationArgs\n    );\n  }\n\n  /**\n   * Sends multi-agent transaction\n   * @param secondarySignersAccountAddress List of account address of tx secondary signers\n   * @param rawTxn The raw transaction to be submitted\n   * @param senderAuthenticator The sender account authenticator\n   * @param secondarySignersAuthenticator List of the secondary signers account authenticator\n   * @param enableTransactionWaitAndSimulationArgs enable transaction wait and simulation arguments\n   * @returns `TransactionResponse`\n   */\n  async sendMultiAgentTransaction(\n    secondarySignersAccountAddress: Array<string>,\n    rawTxn: TxnBuilderTypes.RawTransaction,\n    senderAuthenticator: TxnBuilderTypes.AccountAuthenticatorEd25519,\n    secondarySignersAuthenticator: Array<TxnBuilderTypes.AccountAuthenticatorEd25519>,\n    enableTransactionWaitAndSimulationArgs?: EnableTransactionWaitAndSimulationArgs\n  ): Promise<TransactionResponse> {\n    let secondarySignersAuthenticatorJSON: Array<Ed25519AuthenticatorJSON> = [];\n    secondarySignersAuthenticator.forEach((authenticator) => {\n      secondarySignersAuthenticatorJSON.push(\n        this.getED25519AuthenticatorJSON(authenticator)\n      );\n    });\n\n    let sendTxPayload: SendTxPayload = {\n      Move: {\n        raw_txn: this.getRawTxnJSON(rawTxn),\n        authenticator: {\n          MultiAgent: {\n            sender: this.getED25519AuthenticatorJSON(senderAuthenticator),\n            secondary_signer_addresses: secondarySignersAccountAddress,\n            secondary_signers: secondarySignersAuthenticatorJSON,\n          },\n        },\n      },\n    };\n\n    return await this.sendTx(\n      sendTxPayload,\n      enableTransactionWaitAndSimulationArgs\n    );\n  }\n\n  private getED25519AuthenticatorJSON(\n    authenticator: TxnBuilderTypes.AccountAuthenticatorEd25519\n  ): Ed25519AuthenticatorJSON {\n    return {\n      Ed25519: {\n        public_key: Buffer.from(authenticator.public_key.value).toString(\"hex\"),\n        signature: Buffer.from(authenticator.signature.value).toString(\"hex\"),\n      },\n    };\n  }\n\n  private createRawTxObjectInner(\n    senderAddr: HexString,\n    senderSequenceNumber: bigint,\n    payload: TxnBuilderTypes.TransactionPayload,\n    optionalTransactionPayloadArgs?: OptionalTransactionPayloadArgs\n  ): TxnBuilderTypes.RawTransaction {\n    return new TxnBuilderTypes.RawTransaction(\n      new TxnBuilderTypes.AccountAddress(senderAddr.toUint8Array()),\n      senderSequenceNumber,\n      payload,\n      optionalTransactionPayloadArgs?.maxGas ?? DEFAULT_MAX_GAS_UNITS,\n      optionalTransactionPayloadArgs?.gasUnitPrice ?? DEFAULT_GAS_PRICE,\n      optionalTransactionPayloadArgs?.txExpiryTime ??\n        BigInt(\n          Math.ceil(Date.now() / MILLISECONDS_PER_SECOND) +\n            DEFAULT_TX_EXPIRATION_DURATION\n        ),\n      this.chainId\n    );\n  }\n\n  /**\n   * Create raw transaction object for `entry_function_payload` type tx\n   * @param senderAddr Sender account address\n   * @param senderSequenceNumber Sender account sequence number\n   * @param moduleAddr Target module address\n   * @param moduleName Target module name\n   * @param functionName Target function name\n   * @param functionTypeArgs Target function type args\n   * @param functionArgs Target function args\n   * @param optionalTransactionPayloadArgs Optional arguments for transaction payload\n   * @returns Raw transaction object\n   * @example\n   * ```typescript\n   * let supraCoinTransferRawTransaction = await supraClient.createRawTxObject(\n   *   senderAccount.address(),\n   *   (\n   *     await supraClient.getAccountInfo(senderAccount.address())\n   *   ).sequence_number,\n   *   \"0000000000000000000000000000000000000000000000000000000000000001\",\n   *   \"supra_account\",\n   *   \"transfer\",\n   *   [],\n   *   [receiverAddress.toUint8Array(), BCS.bcsSerializeUint64(10000)]\n   * );\n   * ```\n   */\n  async createRawTxObject(\n    senderAddr: HexString,\n    senderSequenceNumber: bigint,\n    moduleAddr: string,\n    moduleName: string,\n    functionName: string,\n    functionTypeArgs: TxnBuilderTypes.TypeTag[],\n    functionArgs: Uint8Array[],\n    optionalTransactionPayloadArgs?: OptionalTransactionPayloadArgs\n  ): Promise<TxnBuilderTypes.RawTransaction> {\n    let payload = new TxnBuilderTypes.TransactionPayloadEntryFunction(\n      new TxnBuilderTypes.EntryFunction(\n        new TxnBuilderTypes.ModuleId(\n          new TxnBuilderTypes.AccountAddress(\n            new HexString(normalizeAddress(moduleAddr)).toUint8Array()\n          ),\n          new TxnBuilderTypes.Identifier(moduleName)\n        ),\n        new TxnBuilderTypes.Identifier(functionName),\n        functionTypeArgs,\n        functionArgs\n      )\n    );\n    return this.createRawTxObjectInner(\n      senderAddr,\n      senderSequenceNumber,\n      payload,\n      optionalTransactionPayloadArgs\n    );\n  }\n\n  /**\n   * Create serialized raw transaction for `entry_function_payload` type tx\n   * Under the hood the method utilizes `createRawTxObject` method to create a raw transaction\n   * and then it serializes using bcs serializer\n   * @param senderAddr Sender account address\n   * @param senderSequenceNumber Sender account sequence number\n   * @param moduleAddr Target module address\n   * @param moduleName Target module name\n   * @param functionName Target function name\n   * @param functionTypeArgs Target function type args\n   * @param functionArgs Target function args\n   * @param optionalTransactionPayloadArgs Optional arguments for transaction payload\n   * @returns Serialized raw transaction object\n   */\n  async createSerializedRawTxObject(\n    senderAddr: HexString,\n    senderSequenceNumber: bigint,\n    moduleAddr: string,\n    moduleName: string,\n    functionName: string,\n    functionTypeArgs: TxnBuilderTypes.TypeTag[],\n    functionArgs: Uint8Array[],\n    optionalTransactionPayloadArgs?: OptionalTransactionPayloadArgs\n  ): Promise<Uint8Array> {\n    return BCS.bcsToBytes(\n      await this.createRawTxObject(\n        senderAddr,\n        senderSequenceNumber,\n        moduleAddr,\n        moduleName,\n        functionName,\n        functionTypeArgs,\n        functionArgs,\n        optionalTransactionPayloadArgs\n      )\n    );\n  }\n\n  /**\n   * Create serialized raw transaction object for `automation_registration_payload` type tx\n   * @param senderAddr Sender account address\n   * @param senderSequenceNumber Sender account sequence number\n   * @param moduleAddr Target module address\n   * @param moduleName Target module name\n   * @param functionName Target function name\n   * @param functionTypeArgs Target function type args\n   * @param functionArgs Target function args\n   * @param automation_max_gas_amount Max gas amount for automated transaction\n   * @param automation_gas_price_cap Gas Uint price upper limit that user is willing to pay\n   * @param automation_fee_cap_for_epoch Maximum automation fee that user is willing to pay for epoch.\n   * @param automation_expiration_timestamp_secs Expiration time of the automated transaction in seconds since UTC Epoch start.\n   * @param automation_aux_data Reserved for future extensions of registration parameters.\n   * @param optionalTransactionPayloadArgs Optional arguments for transaction payload\n   * @returns Serialized raw transaction object\n   */\n  createSerializedAutomationRegistrationTxPayloadRawTxObject(\n    senderAddr: HexString,\n    senderSequenceNumber: bigint,\n    moduleAddr: string,\n    moduleName: string,\n    functionName: string,\n    functionTypeArgs: TxnBuilderTypes.TypeTag[],\n    functionArgs: Uint8Array[],\n    automation_max_gas_amount: bigint,\n    automation_gas_price_cap: bigint,\n    automation_fee_cap_for_epoch: bigint,\n    automation_expiration_timestamp_secs: bigint,\n    automation_aux_data: Uint8Array[],\n    optionalTransactionPayloadArgs?: OptionalTransactionPayloadArgs\n  ): Uint8Array {\n    let payload = new TxnBuilderTypes.TransactionPayloadAutomationRegistration(\n      new TxnBuilderTypes.AutomationRegistrationParamsV1(\n        new TxnBuilderTypes.AutomationRegistrationParamsV1Data(\n          new TxnBuilderTypes.EntryFunction(\n            new TxnBuilderTypes.ModuleId(\n              new TxnBuilderTypes.AccountAddress(\n                new HexString(normalizeAddress(moduleAddr)).toUint8Array()\n              ),\n              new TxnBuilderTypes.Identifier(moduleName)\n            ),\n            new TxnBuilderTypes.Identifier(functionName),\n            functionTypeArgs,\n            functionArgs\n          ),\n          automation_max_gas_amount,\n          automation_gas_price_cap,\n          automation_fee_cap_for_epoch,\n          automation_expiration_timestamp_secs,\n          automation_aux_data\n        )\n      )\n    );\n    return BCS.bcsToBytes(\n      this.createRawTxObjectInner(\n        senderAddr,\n        senderSequenceNumber,\n        payload,\n        optionalTransactionPayloadArgs\n      )\n    );\n  }\n\n  /**\n   * Create signed transaction payload\n   * @param senderAccount Sender KeyPair\n   * @param rawTxn Raw transaction payload\n   * @returns `SignedTransaction`\n   */\n  static createSignedTransaction(\n    senderAccount: SupraAccount,\n    rawTxn: TxnBuilderTypes.RawTransaction\n  ): TxnBuilderTypes.SignedTransaction {\n    return new TxnBuilderTypes.SignedTransaction(\n      rawTxn,\n      new TxnBuilderTypes.AccountAuthenticatorEd25519(\n        new TxnBuilderTypes.Ed25519PublicKey(\n          senderAccount.pubKey().toUint8Array()\n        ),\n        new TxnBuilderTypes.Ed25519Signature(\n          SupraClient.signSupraTransaction(senderAccount, rawTxn).toUint8Array()\n        )\n      )\n    );\n  }\n\n  /**\n   * Generate transaction hash locally\n   * @param signedTransaction Signed transaction payload\n   * @returns `SignedTransaction`\n   * @example\n   * ```typescript\n   *  let supraCoinTransferSignedTransaction = SupraClient.createSignedTransaction(\n   *     senderAccount,\n   *     supraCoinTransferRawTransaction\n   *  );\n   *  console.log(\n   *     SupraClient.deriveTransactionHash(supraCoinTransferSignedTransaction)\n   *  );\n   * ```\n   */\n  static deriveTransactionHash(\n    signedTransaction: TxnBuilderTypes.SignedTransaction\n  ): string {\n    return sha3.keccak256(BCS.bcsToBytes(signedTransaction));\n  }\n\n  /**\n   * Transfer supra coin\n   * @param senderAccount Sender KeyPair\n   * @param receiverAccountAddr Receiver Supra Account address\n   * @param amount Amount to transfer\n   * @param optionalTransactionArgs optional arguments for transaction\n   * @returns `TransactionResponse`\n   */\n  async transferSupraCoin(\n    senderAccount: SupraAccount,\n    receiverAccountAddr: HexString,\n    amount: bigint,\n    optionalTransactionArgs?: OptionalTransactionArgs\n  ): Promise<TransactionResponse> {\n    if (\n      optionalTransactionArgs?.optionalTransactionPayloadArgs &&\n      !optionalTransactionArgs?.optionalTransactionPayloadArgs?.maxGas\n    ) {\n      let maxGas = BigInt(\n        DEFAULT_MAX_GAS_FOR_SUPRA_TRANSFER_WHEN_RECEIVER_EXISTS\n      );\n      if ((await this.isAccountExists(receiverAccountAddr)) == false) {\n        maxGas = BigInt(\n          DEFAULT_MAX_GAS_FOR_SUPRA_TRANSFER_WHEN_RECEIVER_NOT_EXISTS\n        );\n      }\n      optionalTransactionArgs.optionalTransactionPayloadArgs.maxGas = maxGas;\n    }\n\n    let sendTxPayload = this.getSendTxPayload(\n      senderAccount,\n      await this.createRawTxObject(\n        senderAccount.address(),\n        (\n          await this.getAccountInfo(senderAccount.address())\n        ).sequence_number,\n        SUPRA_FRAMEWORK_ADDRESS,\n        \"supra_account\",\n        \"transfer\",\n        [],\n        [receiverAccountAddr.toUint8Array(), BCS.bcsSerializeUint64(amount)],\n        optionalTransactionArgs?.optionalTransactionPayloadArgs\n      )\n    );\n\n    return await this.sendTx(\n      sendTxPayload,\n      optionalTransactionArgs?.enableTransactionWaitAndSimulationArgs\n    );\n  }\n\n  /**\n   * Transfer custom type of coin\n   * @param senderAccount Sender KeyPair\n   * @param receiverAccountAddr Receiver Supra Account address\n   * @param amount Amount to transfer\n   * @param coinType Type of custom coin\n   * @param optionalTransactionArgs optional arguments for transaction\n   * @returns `TransactionResponse`\n   */\n  async transferCoin(\n    senderAccount: SupraAccount,\n    receiverAccountAddr: HexString,\n    amount: bigint,\n    coinType: string,\n    optionalTransactionArgs?: OptionalTransactionArgs\n  ): Promise<TransactionResponse> {\n    let sendTxPayload = this.getSendTxPayload(\n      senderAccount,\n      await this.createRawTxObject(\n        senderAccount.address(),\n        (\n          await this.getAccountInfo(senderAccount.address())\n        ).sequence_number,\n        SUPRA_FRAMEWORK_ADDRESS,\n        \"supra_account\",\n        \"transfer_coins\",\n        [new TxnBuilderTypes.TypeTagParser(coinType).parseTypeTag()],\n        [receiverAccountAddr.toUint8Array(), BCS.bcsSerializeUint64(amount)],\n        optionalTransactionArgs?.optionalTransactionPayloadArgs\n      )\n    );\n\n    return await this.sendTx(\n      sendTxPayload,\n      optionalTransactionArgs?.enableTransactionWaitAndSimulationArgs\n    );\n  }\n\n  /**\n   * Publish package or module on supra network\n   * @param senderAccount Module Publisher KeyPair\n   * @param packageMetadata Package Metadata\n   * @param modulesCode module code\n   * @param optionalTransactionArgs optional arguments for transaction\n   * @returns `TransactionResponse`\n   */\n  async publishPackage(\n    senderAccount: SupraAccount,\n    packageMetadata: Uint8Array,\n    modulesCode: Uint8Array[],\n    optionalTransactionArgs?: OptionalTransactionArgs\n  ): Promise<TransactionResponse> {\n    let codeSerializer = new BCS.Serializer();\n    let modulesTypeCode: TxnBuilderTypes.Module[] = [];\n    for (let i = 0; i < modulesCode.length; i++) {\n      modulesTypeCode.push(\n        new TxnBuilderTypes.Module(Uint8Array.from(modulesCode[i]))\n      );\n    }\n    BCS.serializeVector(modulesTypeCode, codeSerializer);\n\n    let sendTxPayload = this.getSendTxPayload(\n      senderAccount,\n      await this.createRawTxObject(\n        senderAccount.address(),\n        (\n          await this.getAccountInfo(senderAccount.address())\n        ).sequence_number,\n        SUPRA_FRAMEWORK_ADDRESS,\n        \"code\",\n        \"publish_package_txn\",\n        [],\n        [BCS.bcsSerializeBytes(packageMetadata), codeSerializer.getBytes()],\n        optionalTransactionArgs?.optionalTransactionPayloadArgs\n      )\n    );\n\n    return await this.sendTx(\n      sendTxPayload,\n      optionalTransactionArgs?.enableTransactionWaitAndSimulationArgs\n    );\n  }\n\n  /**\n   * Simulate a transaction using the provided transaction payload\n   * @param sendTxPayload Transaction payload\n   * @returns Transaction simulation result\n   */\n  async simulateTx(sendTxPayload: SendTxPayload): Promise<any> {\n    let txAuthenticatorWithValidSignatures = sendTxPayload.Move.authenticator;\n    let txAuthenticatorClone = JSON.parse(\n      JSON.stringify(txAuthenticatorWithValidSignatures)\n    );\n    sendTxPayload.Move.authenticator = txAuthenticatorClone;\n    this.unsetAuthenticatorSignatures(sendTxPayload.Move.authenticator);\n    let resData = await this.sendRequest(\n      false,\n      \"/rpc/v1/transactions/simulate\",\n      sendTxPayload\n    );\n\n    sendTxPayload.Move.authenticator = txAuthenticatorWithValidSignatures;\n    if (resData.data.output.Move.vm_status !== \"Executed successfully\") {\n      throw new Error(\n        \"Transaction Can Be Failed, Reason: \" +\n          resData.data.output.Move.vm_status\n      );\n    }\n    console.log(\"Transaction Simulation Done\");\n    return resData.data;\n  }\n\n  private unsetAuthenticatorSignatures(txAuthenticator: AnyAuthenticatorJSON) {\n    let nullSignature = \"0x\" + \"0\".repeat(128);\n    if (\"Ed25519\" in txAuthenticator) {\n      txAuthenticator.Ed25519.signature = nullSignature;\n    } else if (\"FeePayer\" in txAuthenticator) {\n      txAuthenticator.FeePayer.sender.Ed25519.signature = nullSignature;\n      txAuthenticator.FeePayer.fee_payer_signer.Ed25519.signature =\n        nullSignature;\n      txAuthenticator.FeePayer.secondary_signers.forEach(\n        (ed25519Authenticator) => {\n          ed25519Authenticator.Ed25519.signature = nullSignature;\n        }\n      );\n    } else {\n      txAuthenticator.MultiAgent.sender.Ed25519.signature = nullSignature;\n      txAuthenticator.MultiAgent.secondary_signers.forEach(\n        (ed25519Authenticator) => {\n          ed25519Authenticator.Ed25519.signature = nullSignature;\n        }\n      );\n    }\n  }\n\n  /**\n   * Simulate a transaction using the provided Serialized raw transaction data\n   * @param txAuthenticator Transaction authenticator\n   * @param serializedRawTransaction Serialized raw transaction data\n   * @returns Transaction simulation result\n   */\n  async simulateTxUsingSerializedRawTransaction(\n    txAuthenticator: AnyAuthenticatorJSON,\n    serializedRawTransaction: Uint8Array\n  ): Promise<any> {\n    let sendTxPayload = {\n      Move: {\n        raw_txn: this.getRawTxnJSON(\n          TxnBuilderTypes.RawTransaction.deserialize(\n            new BCS.Deserializer(serializedRawTransaction)\n          )\n        ),\n        authenticator: txAuthenticator,\n      },\n    };\n\n    return await this.simulateTx(sendTxPayload);\n  }\n}\n","import { TxnBuilderTypes } from \"supra-l1-sdk-core\";\nimport { FunctionTypeArgs } from \"./types\";\n\nexport const parseFunctionTypeArgs = (\n  functionTypeArgs: TxnBuilderTypes.TypeTag[]\n): Array<FunctionTypeArgs> => {\n  let functionTypeArgsParsed: Array<FunctionTypeArgs> = new Array();\n  functionTypeArgs.forEach((data) => {\n    let structTagData = (data as TxnBuilderTypes.TypeTagStruct).value;\n    functionTypeArgsParsed.push({\n      struct: {\n        address: structTagData.address.toHexString().toString(),\n        module: structTagData.module_name.value,\n        name: structTagData.name.value,\n        type_args: parseFunctionTypeArgs(structTagData.type_args),\n      },\n    });\n  });\n  return functionTypeArgsParsed;\n};\n\nexport const fromUint8ArrayToJSArray = (\n  arr: Uint8Array[]\n): Array<Array<number>> => {\n  let resData: Array<Array<number>> = new Array();\n  for (let i = 0; i < arr.length; i++) {\n    resData.push(Array.from(arr[i]));\n  }\n  return resData;\n};\n\nexport const normalizeAddress = (addressToNormalize: string): string => {\n  let normalized = addressToNormalize.toLowerCase();\n\n  if (normalized.length < 66) {\n    if (normalized.startsWith('0x')) {\n      normalized = normalized.slice(2).padStart(64, '0');\n    } else {\n      normalized = normalized.padStart(64, '0');\n    }\n    return '0x' + normalized;\n  }\n\n  if (normalized.length === 66 && normalized.startsWith('0x')) {\n    return normalized;\n  }\n\n  throw new Error(\"Invalid address. With '0x', address length should be exactly 66 characters.\");\n};\n\nexport const sleep = (timeMs: number): Promise<null> => {\n  return new Promise((resolve) => {\n    setTimeout(resolve, timeMs);\n  });\n};\n","import { TxnBuilderTypes } from \"supra-l1-sdk-core\";\nexport interface AccountInfo {\n  sequence_number: bigint;\n  authentication_key: string;\n}\n\nexport interface ResourceInfo {\n  address: string;\n  module: string;\n  name: string;\n  type_args: Array<{ struct: TxnBuilderTypes.StructTag }>;\n}\n\nexport interface AccountResources {\n  resource: Array<[string, ResourceInfo]>;\n  cursor: string;\n}\n\nexport interface CoinInfo {\n  name: string;\n  symbol: string;\n  decimals: number;\n}\n\nexport enum TransactionStatus {\n  Success = \"Success\",\n  Failed = \"Failed\",\n  Pending = \"Pending\",\n}\n\nexport interface TransactionResponse {\n  txHash: string;\n  result: TransactionStatus;\n}\n\nexport enum TxTypeForTransactionInsights {\n  CoinTransfer = \"CoinTransfer\",\n  EntryFunctionCall = \"EntryFunctionCall\",\n  ScriptCall = \"ScriptCall\",\n  AutomationRegistration = \"AutomationRegistration\",\n}\n\nexport interface CoinChange {\n  coinType: string;\n  amount: bigint;\n}\n\nexport interface TransactionInsights {\n  coinReceiver: string;\n  coinChange: Array<CoinChange>;\n  type: TxTypeForTransactionInsights;\n}\n\nexport interface TransactionDetail {\n  txHash: string;\n  sender: string;\n  sequenceNumber: number;\n  maxGasAmount: number;\n  gasUnitPrice: number;\n  gasUsed?: number;\n  transactionCost?: number;\n  txExpirationTimestamp?: number;\n  txConfirmationTime?: number;\n  status: TransactionStatus;\n  events: any;\n  blockNumber?: number;\n  blockHash?: string;\n  transactionInsights: TransactionInsights;\n  vm_status?: string;\n}\n\nexport interface AccountCoinTransactionsDetail {\n  transactions: Array<TransactionDetail>;\n  cursor: number;\n}\n\nexport interface RawTxnJSON {\n  sender: string;\n  sequence_number: number;\n  payload: TransactionPayloadJSON;\n  max_gas_amount: number;\n  gas_unit_price: number;\n  expiration_timestamp_secs: number;\n  chain_id: number;\n}\n\nexport type TransactionPayloadJSON =\n  | EntryFunctionPayloadJSON\n  | AutomationRegistrationPayloadJSON;\n\nexport interface EntryFunctionPayloadJSON {\n  EntryFunction: EntryFunctionJSON;\n}\n\nexport interface EntryFunctionJSON {\n  module: {\n    address: string;\n    name: string;\n  };\n  function: string;\n  ty_args: Array<FunctionTypeArgs>;\n  args: Array<Array<number>>;\n}\n\nexport interface AutomationRegistrationPayloadJSON {\n  AutomationRegistration: AutomationRegistrationParamV1JSON;\n}\n\nexport interface AutomationRegistrationParamV1JSON {\n  V1: {\n    automated_function: EntryFunctionJSON;\n    max_gas_amount: number;\n    gas_price_cap: number;\n    automation_fee_cap_for_epoch: number;\n    expiration_timestamp_secs: number;\n    aux_data: Array<Array<number>>;\n  };\n}\n\nexport interface Ed25519AuthenticatorJSON {\n  Ed25519: {\n    public_key: string;\n    signature: string;\n  };\n}\n\nexport interface SponsorTransactionAuthenticatorJSON {\n  FeePayer: {\n    sender: Ed25519AuthenticatorJSON;\n    secondary_signer_addresses: Array<string>;\n    secondary_signers: Array<Ed25519AuthenticatorJSON>;\n    fee_payer_address: string;\n    fee_payer_signer: Ed25519AuthenticatorJSON;\n  };\n}\n\nexport interface MultiAgentTransactionAuthenticatorJSON {\n  MultiAgent: {\n    sender: Ed25519AuthenticatorJSON;\n    secondary_signer_addresses: Array<string>;\n    secondary_signers: Array<Ed25519AuthenticatorJSON>;\n  };\n}\n\nexport type AnyAuthenticatorJSON =\n  | Ed25519AuthenticatorJSON\n  | SponsorTransactionAuthenticatorJSON\n  | MultiAgentTransactionAuthenticatorJSON;\n\nexport interface SendTxPayload {\n  Move: {\n    raw_txn: RawTxnJSON;\n    authenticator: AnyAuthenticatorJSON;\n  };\n}\n\nexport interface FunctionTypeArgs {\n  struct: {\n    address: string;\n    module: string;\n    name: string;\n    type_args: Array<any>;\n  };\n}\n\nexport interface FaucetRequestResponse {\n  status: TransactionStatus;\n  transactionHash: string;\n}\n\nexport interface EnableTransactionWaitAndSimulationArgs {\n  enableWaitForTransaction?: boolean;\n  enableTransactionSimulation?: boolean;\n}\n\nexport interface OptionalTransactionPayloadArgs {\n  maxGas?: bigint;\n  gasUnitPrice?: bigint;\n  txExpiryTime?: bigint;\n}\n\nexport interface OptionalTransactionArgs {\n  optionalTransactionPayloadArgs?: OptionalTransactionPayloadArgs;\n  enableTransactionWaitAndSimulationArgs?: EnableTransactionWaitAndSimulationArgs;\n}\n\nexport interface PaginationArgs {\n  count?: number;\n  start?: string | number;\n}\n","export const DEFAULT_CHAIN_ID = 6;\nexport const MAX_RETRY_FOR_TRANSACTION_COMPLETION = 300;\nexport const DELAY_BETWEEN_POOLING_REQUEST = 1000; // 1 Second\nexport const DEFAULT_RECORDS_ITEMS_COUNT = 15;\n// The `maximum_number_of_gas_units` amount at move layer is 2 million\nexport const DEFAULT_MAX_GAS_UNITS = BigInt(500000);\n// The `min_price_per_gas_unit` amount at move layer is 100\nexport const DEFAULT_GAS_PRICE = BigInt(100);\nexport const DEFAULT_TX_EXPIRATION_DURATION = 300; // 5 Minutes\nexport const MILLISECONDS_PER_SECOND = 1000;\nexport const SUPRA_FRAMEWORK_ADDRESS =\n  \"0x0000000000000000000000000000000000000000000000000000000000000001\";\nexport const DEFAULT_ENABLE_SIMULATION = false;\nexport const DEFAULT_WAIT_FOR_TX_COMPLETION = false;\nexport const DEFAULT_MAX_GAS_FOR_SUPRA_TRANSFER_WHEN_RECEIVER_EXISTS = 10;\nexport const DEFAULT_MAX_GAS_FOR_SUPRA_TRANSFER_WHEN_RECEIVER_NOT_EXISTS = 1020;\nexport const RAW_TRANSACTION_SALT = \"SUPRA::RawTransaction\";\nexport const RAW_TRANSACTION_WITH_DATA_SALT = \"SUPRA::RawTransactionWithData\";"],"mappings":"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","names":["index_exports","__export","DEFAULT_CHAIN_ID","DEFAULT_ENABLE_SIMULATION","DEFAULT_GAS_PRICE","DEFAULT_MAX_GAS_FOR_SUPRA_TRANSFER_WHEN_RECEIVER_EXISTS","DEFAULT_MAX_GAS_FOR_SUPRA_TRANSFER_WHEN_RECEIVER_NOT_EXISTS","DEFAULT_MAX_GAS_UNITS","DEFAULT_RECORDS_ITEMS_COUNT","DEFAULT_TX_EXPIRATION_DURATION","DEFAULT_WAIT_FOR_TX_COMPLETION","DELAY_BETWEEN_POOLING_REQUEST","MAX_RETRY_FOR_TRANSACTION_COMPLETION","MILLISECONDS_PER_SECOND","RAW_TRANSACTION_SALT","RAW_TRANSACTION_WITH_DATA_SALT","SUPRA_FRAMEWORK_ADDRESS","SupraClient","TransactionStatus","TxTypeForTransactionInsights","__toCommonJS","import_supra_l1_sdk_core","import_axios","parseFunctionTypeArgs","functionTypeArgs","functionTypeArgsParsed","data","structTagData","fromUint8ArrayToJSArray","arr","resData","i","normalizeAddress","addressToNormalize","normalized","sleep","timeMs","resolve","TransactionStatus","TxTypeForTransactionInsights","DEFAULT_CHAIN_ID","MAX_RETRY_FOR_TRANSACTION_COMPLETION","DELAY_BETWEEN_POOLING_REQUEST","DEFAULT_RECORDS_ITEMS_COUNT","DEFAULT_MAX_GAS_UNITS","DEFAULT_GAS_PRICE","DEFAULT_TX_EXPIRATION_DURATION","MILLISECONDS_PER_SECOND","SUPRA_FRAMEWORK_ADDRESS","DEFAULT_ENABLE_SIMULATION","DEFAULT_WAIT_FOR_TX_COMPLETION","DEFAULT_MAX_GAS_FOR_SUPRA_TRANSFER_WHEN_RECEIVER_EXISTS","DEFAULT_MAX_GAS_FOR_SUPRA_TRANSFER_WHEN_RECEIVER_NOT_EXISTS","RAW_TRANSACTION_SALT","RAW_TRANSACTION_WITH_DATA_SALT","import_js_sha3","SupraClient","_SupraClient","url","chainId","supraClient","isGetMethod","subURL","data","resData","axios","account","paginationArgs","requestPath","resourceType","transactionHash","userAddress","events","coinChange","eventData","curData","coinChangeParsed","value","key","txData","txInsights","amountChange","accountTransactionsDetail","coinTransactionsDetail","count","coinTransactions","accountSendedTransactions","combinedTxArray","combinedTx","item","index","self","a","b","coinType","coinInfoResource","SUPRA_FRAMEWORK_ADDRESS","functionFullName","typeArguments","functionArguments","tableHandle","keyType","valueType","txHash","i","txStatus","sleep","sendTxJsonPayload","enableTransactionWaitAndSimulationArgs","DEFAULT_ENABLE_SIMULATION","DEFAULT_WAIT_FOR_TX_COMPLETION","rawTxn","preHash","sha3","RAW_TRANSACTION_SALT","RAW_TRANSACTION_WITH_DATA_SALT","rawTxSerializedData","signatureMessage","senderAccount","signer","signerSignature","txPayload","parseFunctionTypeArgs","fromUint8ArrayToJSArray","serializedRawTransaction","sendTxPayload","senderPubkey","signature","feePayerAddress","secondarySignersAccountAddress","senderAuthenticator","feePayerAuthenticator","secondarySignersAuthenticator","secondarySignersAuthenticatorJSON","authenticator","senderAddr","senderSequenceNumber","payload","optionalTransactionPayloadArgs","DEFAULT_MAX_GAS_UNITS","DEFAULT_GAS_PRICE","MILLISECONDS_PER_SECOND","DEFAULT_TX_EXPIRATION_DURATION","moduleAddr","moduleName","functionName","functionTypeArgs","functionArgs","normalizeAddress","automation_max_gas_amount","automation_gas_price_cap","automation_fee_cap_for_epoch","automation_expiration_timestamp_secs","automation_aux_data","signedTransaction","receiverAccountAddr","amount","optionalTransactionArgs","maxGas","DEFAULT_MAX_GAS_FOR_SUPRA_TRANSFER_WHEN_RECEIVER_EXISTS","DEFAULT_MAX_GAS_FOR_SUPRA_TRANSFER_WHEN_RECEIVER_NOT_EXISTS","packageMetadata","modulesCode","codeSerializer","modulesTypeCode","txAuthenticatorWithValidSignatures","txAuthenticatorClone","txAuthenticator","nullSignature","ed25519Authenticator"]}