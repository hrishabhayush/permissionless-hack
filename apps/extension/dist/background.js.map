{"version":3,"file":"background.js","mappingssources":["webpack://@referral-bridge/extension/./src/background.ts"],"sourcesContent":["\"use strict\";\nconsole.log('🚀 Referral Extension Background Script Loaded');\n// Test user data (in a real app, this would come from storage/API)\nconst backgroundTestUser = {\n    username: 'testuser',\n    walletAddress: '0x742d35Cc6635C0532925a3b8D2c2C5c5b2b4b3b3'\n};\nconsole.log('🚀 Test user data loaded:', backgroundTestUser);\n// Listen for messages from content scripts\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n    console.log('📨 Message received from content script:', message);\n    if (message.type === 'ATTRIBUTION_DETECTED') {\n        console.log('🎯 Attribution detected!', message.data);\n        // In a real implementation, this would:\n        // 1. Send data to our API\n        // 2. Track the attribution in our database\n        // 3. Prepare for future payout calculations\n        console.log('💰 Attribution data that would be sent to API:', {\n            user: message.data.user,\n            wallet: message.data.wallet,\n            source: message.data.source,\n            destination: message.data.destination,\n            referralId: message.data.referralId,\n            timestamp: message.data.timestamp,\n            originalUrl: message.data.originalUrl,\n            modifiedUrl: message.data.modifiedUrl\n        });\n        // Store attribution locally for now\n        chrome.storage.local.get(['attributions'], (result) => {\n            const attributions = result.attributions || [];\n            attributions.push(message.data);\n            chrome.storage.local.set({ attributions }, () => {\n                console.log('💾 Attribution stored locally');\n                console.log('📊 Total attributions:', attributions.length);\n            });\n        });\n        sendResponse({ success: true });\n    }\n    return true; // Keep message channel open for async response\n});\n// Function to generate referral parameter\nfunction generateReferralParam(userId) {\n    // In a real implementation, this would be more sophisticated\n    return `ref=${userId}_${Date.now()}`;\n}\n// Debug: Log all web requests to see what we're intercepting\nchrome.webRequest.onBeforeRequest.addListener((details) => {\n    // Only log interesting requests to avoid spam\n    if (details.url.includes('utm_source=chatgpt.com') ||\n        details.url.includes('visioncenter.org') ||\n        details.url.includes('ref=')) {\n        console.log('🌐 Interesting web request:', {\n            url: details.url,\n            method: details.method,\n            type: details.type,\n            tabId: details.tabId\n        });\n    }\n    return {};\n}, {\n    urls: ['https://*/*', 'http://*/*'],\n    types: ['main_frame', 'sub_frame']\n});\n// Also intercept before sending headers to see more details\nchrome.webRequest.onBeforeSendHeaders.addListener((details) => {\n    if (details.url.includes('utm_source=chatgpt.com') ||\n        details.url.includes('visioncenter.org')) {\n        console.log('📤 Headers for request:', {\n            url: details.url,\n            headers: details.requestHeaders,\n            tabId: details.tabId\n        });\n    }\n    return {};\n}, {\n    urls: ['https://*/*', 'http://*/*']\n}, ['requestHeaders']);\n// Listen for completed requests to see the final URLs\nchrome.webRequest.onCompleted.addListener((details) => {\n    if (details.url.includes('utm_source=chatgpt.com') ||\n        details.url.includes('visioncenter.org') ||\n        details.url.includes('ref=')) {\n        console.log('✅ Request completed:', {\n            url: details.url,\n            statusCode: details.statusCode,\n            tabId: details.tabId\n        });\n    }\n}, {\n    urls: ['https://*/*', 'http://*/*']\n});\n// Listen for tab updates to know when users navigate to attributed pages\nchrome.tabs.onUpdated.addListener((tabId, changeInfo, tab) => {\n    if (changeInfo.status === 'complete' && tab.url?.includes('utm_source=chatgpt.com')) {\n        console.log('🔗 ChatGPT attributed page loaded:', {\n            tabId: tabId,\n            url: tab.url,\n            title: tab.title\n        });\n    }\n});\n// Listen for when tabs are activated (user switches to them)\nchrome.tabs.onActivated.addListener((activeInfo) => {\n    chrome.tabs.get(activeInfo.tabId, (tab) => {\n        if (tab.url?.includes('chatgpt.com')) {\n            console.log('👁️ User switched to ChatGPT tab:', {\n                tabId: activeInfo.tabId,\n                url: tab.url\n            });\n        }\n    });\n});\n// Test function to verify the extension is working\nfunction testExtension() {\n    console.log('🧪 Running extension test...');\n    console.log('🧪 Chrome APIs available:', {\n        runtime: !!chrome.runtime,\n        storage: !!chrome.storage,\n        tabs: !!chrome.tabs,\n        webRequest: !!chrome.webRequest\n    });\n}\n// Run test on startup\ntestExtension();\n// Store user data for content script access\nchrome.storage.local.set({ user: backgroundTestUser }, () => {\n    console.log('💾 User data stored in extension storage');\n});\nconsole.log('🚀 Background script setup complete');\n"],"names":[],"sourceRoot":""}