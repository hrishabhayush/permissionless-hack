{"version":3,"file":"content.js","mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://@referral-bridge/extension/./src/content.ts"],"sourcesContent":["\"use strict\";\nconsole.log('ðŸ”§ Referral Extension Content Script Loaded');\nconsole.log('ðŸ”§ Current URL:', window.location.href);\nconsole.log('ðŸ”§ Domain:', window.location.hostname);\n// Test user data\nconst contentTestUser = {\n    username: 'testuser',\n    walletAddress: '0x742d35Cc6635C0532925a3b8D2c2C5c5b2b4b3b3'\n};\nconsole.log('ðŸ”§ Test user loaded:', contentTestUser);\n// Source patterns for categorization\nconst sourcePatterns = {\n    news: /\\b(cnn\\.com|bbc\\.com|reuters\\.com|ap\\.org|npr\\.org|washingtonpost\\.com|nytimes\\.com|wsj\\.com)\\b/i,\n    fashion: /\\b(vogue\\.com|elle\\.com|harpersbazaar\\.com|gq\\.com|fashionista\\.com|wwd\\.com)\\b/i,\n    sneaker: /\\b(sneakernews\\.com|hypebeast\\.com|nicekicks\\.com|solecollector\\.com|kicksonfire\\.com)\\b/i,\n    social: /\\b(reddit\\.com|twitter\\.com|instagram\\.com|tiktok\\.com|youtube\\.com|facebook\\.com)\\b/i,\n    vision: /\\b(visioncenter\\.org|allaboutvision\\.com|aao\\.org|reviewofoptometry\\.com)\\b/i\n};\nfunction categorizeSource(domain) {\n    for (const [category, pattern] of Object.entries(sourcePatterns)) {\n        if (pattern.test(domain)) {\n            return category;\n        }\n    }\n    return 'other';\n}\nfunction extractSources(text) {\n    console.log('ðŸ”§ Extracting sources from text:', text.substring(0, 200) + '...');\n    // Look for various citation patterns\n    const patterns = [\n        /\\b([a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})\\b/g, // Basic domain pattern\n        /(?:https?:\\/\\/)?(?:www\\.)?([a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})(?:\\/[^\\s]*)?/g, // URL pattern\n        /\\(([^)]+\\.[a-zA-Z]{2,})\\)/g, // Domains in parentheses\n        /\\[([^\\]]+\\.[a-zA-Z]{2,})\\]/g, // Domains in brackets\n    ];\n    const sources = new Set();\n    patterns.forEach(pattern => {\n        const matches = text.match(pattern);\n        if (matches) {\n            console.log('ðŸ”§ Pattern matches found:', matches);\n            matches.forEach(match => {\n                // Clean up the match to get just the domain\n                const cleaned = match.replace(/^https?:\\/\\//, '')\n                    .replace(/^www\\./, '')\n                    .replace(/\\/.*$/, '')\n                    .replace(/[()[\\]]/g, '');\n                if (cleaned.includes('.') && !cleaned.includes(' ')) {\n                    sources.add(cleaned.toLowerCase());\n                }\n            });\n        }\n    });\n    const sourceArray = Array.from(sources);\n    console.log('ðŸ”§ Extracted sources:', sourceArray);\n    return sourceArray;\n}\nfunction checkForLinks() {\n    console.log('ðŸ”§ Checking for links in the page...');\n    // Check all links on the page\n    const allLinks = document.querySelectorAll('a[href]');\n    console.log('ðŸ”§ Total links found:', allLinks.length);\n    let chatgptLinks = 0;\n    let utmLinks = 0;\n    allLinks.forEach((link, index) => {\n        const href = link.href;\n        if (href.includes('chatgpt.com')) {\n            chatgptLinks++;\n            console.log('ðŸ”§ ChatGPT link found:', href);\n        }\n        if (href.includes('utm_source=chatgpt.com')) {\n            utmLinks++;\n            console.log('ðŸš¨ UTM ChatGPT link found:', href);\n            console.log('ðŸš¨ Link element:', link);\n            console.log('ðŸš¨ Link text:', link.textContent);\n            console.log('ðŸš¨ Link parent:', link.parentElement);\n        }\n        // Log first few external links for debugging\n        if (index < 5 && href.startsWith('http') && !href.includes('chatgpt.com')) {\n            console.log(`ðŸ”§ External link ${index + 1}:`, href);\n        }\n    });\n    console.log('ðŸ”§ ChatGPT links:', chatgptLinks);\n    console.log('ðŸ”§ UTM ChatGPT links:', utmLinks);\n    return { totalLinks: allLinks.length, chatgptLinks, utmLinks };\n}\nfunction processMessage(messageElement) {\n    console.log('ðŸ”§ Processing message element:', messageElement);\n    const messageText = messageElement.textContent || '';\n    console.log('ðŸ”§ Message text length:', messageText.length);\n    if (messageText.length > 0) {\n        const sources = extractSources(messageText);\n        if (sources.length > 0) {\n            console.log('ðŸŽ¯ Sources found in message:', sources);\n            // Categorize sources\n            const categorizedSources = sources.map(source => ({\n                domain: source,\n                category: categorizeSource(source)\n            }));\n            console.log('ðŸ“Š Categorized sources:', categorizedSources);\n            // Check for links in this specific message\n            const messageLinks = messageElement.querySelectorAll('a[href]');\n            console.log('ðŸ”§ Links in this message:', messageLinks.length);\n            messageLinks.forEach(link => {\n                const href = link.href;\n                console.log('ðŸ”§ Message link:', href);\n                if (href.includes('utm_source=chatgpt.com')) {\n                    console.log('ðŸš¨ FOUND UTM LINK IN MESSAGE:', href);\n                }\n            });\n        }\n    }\n    // Always check for links regardless of text content\n    checkForLinks();\n}\n// Main observer function\nfunction observeMessages() {\n    console.log('ðŸ”§ Setting up message observer...');\n    // Initial check\n    checkForLinks();\n    const observer = new MutationObserver((mutations) => {\n        console.log('ðŸ”§ DOM mutation detected, mutations count:', mutations.length);\n        mutations.forEach((mutation) => {\n            if (mutation.type === 'childList') {\n                mutation.addedNodes.forEach((node) => {\n                    if (node.nodeType === Node.ELEMENT_NODE) {\n                        const element = node;\n                        // Check if this is a message or contains messages\n                        const messages = element.querySelectorAll('[data-message-author-role=\"assistant\"]');\n                        console.log('ðŸ”§ New assistant messages found:', messages.length);\n                        messages.forEach(processMessage);\n                        // Also check if the added node itself is a message\n                        if (element.matches('[data-message-author-role=\"assistant\"]')) {\n                            console.log('ðŸ”§ Added node is an assistant message');\n                            processMessage(element);\n                        }\n                        // Check for any new links\n                        const newLinks = element.querySelectorAll('a[href]');\n                        if (newLinks.length > 0) {\n                            console.log('ðŸ”§ New links added:', newLinks.length);\n                            newLinks.forEach(link => {\n                                const href = link.href;\n                                if (href.includes('utm_source=chatgpt.com')) {\n                                    console.log('ðŸš¨ NEW UTM LINK DETECTED:', href);\n                                }\n                            });\n                        }\n                    }\n                });\n            }\n        });\n        // Always do a full check after mutations\n        setTimeout(checkForLinks, 100);\n    });\n    observer.observe(document.body, {\n        childList: true,\n        subtree: true\n    });\n    console.log('ðŸ”§ Observer set up successfully');\n}\n// Initialize when DOM is ready\nif (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', observeMessages);\n}\nelse {\n    observeMessages();\n}\n// Also run checks periodically\nsetInterval(() => {\n    console.log('ðŸ”§ Periodic link check...');\n    checkForLinks();\n}, 5000);\n// Check if this page was reached via ChatGPT (has utm_source=chatgpt.com)\nfunction checkForChatGPTReferral() {\n    const urlParams = new URLSearchParams(window.location.search);\n    const utmSource = urlParams.get('utm_source');\n    console.log('ðŸ”§ Checking URL parameters:', {\n        fullURL: window.location.href,\n        search: window.location.search,\n        utmSource: utmSource,\n        allParams: Object.fromEntries(urlParams.entries())\n    });\n    if (utmSource === 'chatgpt.com') {\n        console.log('ðŸŽ¯ CHATGPT REFERRAL DETECTED!');\n        console.log('ðŸŽ¯ This page was reached from ChatGPT');\n        // Check if we already have our referral parameter\n        const existingRef = urlParams.get('ref');\n        if (!existingRef) {\n            console.log('ðŸ”§ Adding referral parameter...');\n            // Add our referral parameter\n            const newRef = `${contentTestUser.username}_${Date.now()}`;\n            urlParams.set('ref', newRef);\n            // Create the new URL\n            const newUrl = `${window.location.protocol}//${window.location.host}${window.location.pathname}?${urlParams.toString()}${window.location.hash}`;\n            console.log('ðŸ”„ URL modification:', {\n                original: window.location.href,\n                modified: newUrl,\n                referralParam: newRef\n            });\n            // Update the URL without reloading the page\n            window.history.replaceState({}, '', newUrl);\n            console.log('âœ… URL updated successfully!');\n            console.log('âœ… New URL:', window.location.href);\n            // Log attribution data\n            console.log('ðŸ“Š Attribution Data:', {\n                user: contentTestUser.username,\n                wallet: contentTestUser.walletAddress,\n                source: 'chatgpt.com',\n                destination: window.location.hostname,\n                timestamp: new Date().toISOString(),\n                referralId: newRef\n            });\n            // Send attribution data to background script (for future API calls)\n            chrome.runtime.sendMessage({\n                type: 'ATTRIBUTION_DETECTED',\n                data: {\n                    user: contentTestUser.username,\n                    wallet: contentTestUser.walletAddress,\n                    source: 'chatgpt.com',\n                    destination: window.location.hostname,\n                    originalUrl: window.location.href.replace(`&ref=${newRef}`, '').replace(`?ref=${newRef}`, ''),\n                    modifiedUrl: window.location.href,\n                    referralId: newRef,\n                    timestamp: new Date().toISOString()\n                }\n            }).catch(err => console.log('ðŸ”§ Background script message failed:', err));\n        }\n        else {\n            console.log('ðŸ”§ Referral parameter already exists:', existingRef);\n        }\n        return true;\n    }\n    else {\n        console.log('ðŸ”§ No ChatGPT referral detected');\n        if (utmSource) {\n            console.log('ðŸ”§ Other UTM source found:', utmSource);\n        }\n        return false;\n    }\n}\n// Function to monitor for dynamic URL changes (for SPAs)\nfunction setupURLMonitoring() {\n    let lastUrl = window.location.href;\n    const checkURLChange = () => {\n        const currentUrl = window.location.href;\n        if (currentUrl !== lastUrl) {\n            console.log('ðŸ”§ URL changed:', { from: lastUrl, to: currentUrl });\n            lastUrl = currentUrl;\n            // Re-check for ChatGPT referral on URL change\n            setTimeout(checkForChatGPTReferral, 100);\n        }\n    };\n    // Monitor for URL changes in SPAs\n    const observer = new MutationObserver(checkURLChange);\n    observer.observe(document.body, { childList: true, subtree: true });\n    // Also listen for popstate events\n    window.addEventListener('popstate', checkURLChange);\n    console.log('ðŸ”§ URL monitoring setup complete');\n}\n// Function to check if we're on a relevant page (not internal browser pages)\nfunction isRelevantPage() {\n    const url = window.location.href;\n    const hostname = window.location.hostname;\n    // Skip internal browser pages, extensions, and localhost during development\n    const skipPatterns = [\n        'chrome://',\n        'chrome-extension://',\n        'moz-extension://',\n        'about:',\n        'file://',\n        'localhost',\n        '127.0.0.1'\n    ];\n    const shouldSkip = skipPatterns.some(pattern => url.startsWith(pattern) || hostname.includes('localhost'));\n    if (shouldSkip) {\n        console.log('ðŸ”§ Skipping internal/development page');\n        return false;\n    }\n    return true;\n}\n// Main initialization function\nfunction initialize() {\n    console.log('ðŸ”§ Initializing referral extension...');\n    if (!isRelevantPage()) {\n        return;\n    }\n    console.log('ðŸ”§ Running on relevant page:', window.location.hostname);\n    // Check for ChatGPT referral immediately\n    const hasChatGPTReferral = checkForChatGPTReferral();\n    if (hasChatGPTReferral) {\n        console.log('ðŸŽ¯ ChatGPT referral page detected!');\n    }\n    else {\n        console.log('ðŸ”§ Regular page - no ChatGPT referral detected');\n    }\n}\n// Run initialization\nif (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', initialize);\n}\nelse {\n    initialize();\n}\n// Also run on window load to catch any late-loading content\nwindow.addEventListener('load', () => {\n    console.log('ðŸ”§ Window loaded, re-checking for referrals...');\n    setTimeout(checkForChatGPTReferral, 500);\n});\nconsole.log('ðŸ”§ Content script setup complete');\n"],"names":[],"sourceRoot":""}